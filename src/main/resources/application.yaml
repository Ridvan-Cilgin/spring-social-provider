spring:
  datasource:
    url: jdbc:mysql://localhost:3306/spring_social_provider?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
    username: appcent
    password: passw0rd

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: "your google client id"
            clientSecret: "your google client secret"
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          facebook:
            clientId: "your facebook client id"
            clientSecret: "your facebook client secret"
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}" # Note that facebook now mandates the use of https redirect URIs, so make sure your app supports https in production
            scope:
              - email
              - public_profile
          github:
            clientId: "your github client id"
            clientSecret: "your github client secret"
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
          linkedin:
            clientId: "your linkedin client id"
            clientSecret: "your linkedin client secret"
            provider: linkedin
            authorization-grant-type: authorization_code
            scope: r_liteprofile, r_emailaddress
            client-name: Linkedin
            client-authentication-method: post
#            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
#            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
#            redirect-uri: http://localhost:3000/Sitefinity/Authenticate/OpenID/signin-linkedin
#            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            redirectUri: http://localhost:3000
#            redirectUri: http://localhost:3000/auth/linkedin/callback
#            client-authentication-method: client-secret-post
        provider:
          linkedin:
            user-info-uri: https://api.linkedin.com/v2/me
            user-name-attribute: id
            authorization-uri: https://www.linkedin.com/oauth/v2/authorization
            token-uri: https://www.linkedin.com/oauth/v2/accessToken
          facebook:
            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
            userInfoUri: https://graph.facebook.com/me?fields=id,name,email,picture
#            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
linkedin:
  email-address-uri: https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))
app:
  auth:
    tokenSecret: "your token secret"
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000 # Comma separated list of allowed origins
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect
